import pytest
from flask import Flask

from app.validators import WebSocketValidator


@pytest.fixture(scope='module')
def flask_app():
    app = Flask(__name__)
    with app.app_context():
        yield app


class TestValidateMessageContent:
    def test_empty_message(self):
        result = WebSocketValidator.validate_message_content("")
        assert result["valid"] is False
        assert "–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" in result["error"].lower()

    def test_too_long_message(self):
        long_text = "a" * (WebSocketValidator.MAX_MESSAGE_LENGTH + 1)
        result = WebSocketValidator.validate_message_content(long_text)
        assert result["valid"] is False
        assert "—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ" in result["error"].lower()

    def test_control_chars_rejected(self):
        result = WebSocketValidator.validate_message_content("hello\x07world")
        assert result["valid"] is False
        assert "–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã" in result["error"].lower()

    def test_spam_detected(self):
        # –ú–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–ª–∏–Ω–∞ > 10
        spam_text = "aaaaaaaaaaaaa"  # 13 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        result = WebSocketValidator.validate_message_content(spam_text)
        assert result["valid"] is False
        assert "—Å–ø–∞–º" in result["error"].lower()

    def test_xss_detected(self, flask_app):
        result = WebSocketValidator.validate_message_content("<script>alert(1)</script>")
        assert result["valid"] is False
        assert "–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç" in result["error"].lower()

    def test_valid_message_trimmed(self):
        result = WebSocketValidator.validate_message_content("  Hello world  ")
        assert result["valid"] is True
        assert result["content"] == "Hello world"


class TestValidateRoomName:
    def test_empty_room_name(self):
        result = WebSocketValidator.validate_room_name("")
        assert result["valid"] is False
        assert "–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" in result["error"].lower()

    def test_too_short_room_name(self):
        result = WebSocketValidator.validate_room_name("a")
        assert result["valid"] is False
        assert "—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ" in result["error"].lower()

    def test_too_long_room_name(self):
        name = "a" * (WebSocketValidator.MAX_ROOM_NAME_LENGTH + 1)
        result = WebSocketValidator.validate_room_name(name)
        assert result["valid"] is False
        assert "—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ" in result["error"].lower()

    def test_invalid_chars_in_room_name(self):
        result = WebSocketValidator.validate_room_name("bad!name")
        assert result["valid"] is False
        assert "–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ" in result["error"].lower()

    def test_forbidden_room_name(self):
        result = WebSocketValidator.validate_room_name("Admin")
        assert result["valid"] is False
        assert "–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ" in result["error"].lower()

    def test_valid_room_name_with_trim(self):
        result = WebSocketValidator.validate_room_name("  Room_1 - –¢–µ—Å—Ç  ")
        assert result["valid"] is True
        assert result["room_name"] == "Room_1 - –¢–µ—Å—Ç"


class TestValidateUserId:
    def test_valid_integer_id(self):
        result = WebSocketValidator.validate_user_id(10)
        assert result["valid"] is True
        assert result["user_id"] == 10

    def test_valid_string_id(self):
        result = WebSocketValidator.validate_user_id("5")
        assert result["valid"] is True
        assert result["user_id"] == 5

    def test_zero_id_invalid(self):
        result = WebSocketValidator.validate_user_id(0)
        assert result["valid"] is False
        assert "–Ω–µ–≤–µ—Ä–Ω—ã–π id" in result["error"].lower()

    def test_negative_id_invalid(self):
        result = WebSocketValidator.validate_user_id(-3)
        assert result["valid"] is False
        assert "–Ω–µ–≤–µ—Ä–Ω—ã–π id" in result["error"].lower()

    def test_non_numeric_id_invalid(self):
        result = WebSocketValidator.validate_user_id("abc")
        assert result["valid"] is False
        assert "–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º" in result["error"].lower()

    def test_none_id_invalid(self):
        result = WebSocketValidator.validate_user_id(None)
        assert result["valid"] is False
        assert "–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º" in result["error"].lower()


# ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò ==========

class TestAdvancedMessageValidation:
    def test_unicode_normalization(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —é–Ω–∏–∫–æ–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ö–æ–º–±–∏–Ω–∏—Ä—É—é—â–∏–µ –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
        result = WebSocketValidator.validate_message_content("caf√©")
        assert result["valid"] is True
        
        # –≠–º–æ–¥–∑–∏ –∏ —Å–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏
        result = WebSocketValidator.validate_message_content("Hello ‰∏ñÁïå üåç –ü—Ä–∏–≤–µ—Ç")
        assert result["valid"] is True
        
        # –ê—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∏ —Ç–µ–∫—Å—Ç
        result = WebSocketValidator.validate_message_content("–¶–µ–Ω–∞: 123‚ÇΩ")
        assert result["valid"] is True

    def test_message_trimming_behavior(self):
        """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤"""
        # –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        result = WebSocketValidator.validate_message_content("  Hello  ")
        assert result["valid"] is True
        assert result["content"] == "Hello"
        
        # –¢–∞–±—É–ª—è—Ü–∏–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)
        result = WebSocketValidator.validate_message_content("\tHello\n")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –ª–∏–±–æ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ "Hello"
        if result["valid"]:
            assert result["content"] == "Hello", f"–û–∂–∏–¥–∞–ª–æ—Å—å 'Hello', –ø–æ–ª—É—á–µ–Ω–æ '{result['content']}'"
        else:
            assert "–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã" in result["error"].lower()
        
        # –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã (–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –Ω–æ –æ–±—Ä–µ–∑–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã)
        result = WebSocketValidator.validate_message_content("\u00A0Hello\u00A0")
        assert result["valid"] is True
        assert result["content"] == "Hello"  # –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –æ–±—Ä–µ–∑–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã

    def test_spam_detection_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""
        # –ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞
        result = WebSocketValidator.validate_message_content("aaaa")
        assert result["valid"] is True  # –∫–æ—Ä–æ—Ç–∫–∞—è, –Ω–µ —Å–ø–∞–º
        
        # –ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        result = WebSocketValidator.validate_message_content("a" * 20)
        assert result["valid"] is False  # —Å–ø–∞–º
        
        # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
        result = WebSocketValidator.validate_message_content("hello hello hello hello")
        assert result["valid"] is True  # —Å–ª–æ–≤–∞, –Ω–µ —Å–∏–º–≤–æ–ª—ã
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (2 —Å–∏–º–≤–æ–ª–∞, –Ω–æ >10 —Å–∏–º–≤–æ–ª–æ–≤ = —Å–ø–∞–º)
        result = WebSocketValidator.validate_message_content("abababababababababab")
        assert result["valid"] is False  # –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞, –Ω–æ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ = —Å–ø–∞–º

    def test_xss_variations(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ XSS"""
        xss_attempts = [
            "<script>alert(1)</script>",
            "<img src=x onerror=alert(1)>",
            "javascript:alert(1)",
            "<iframe src=javascript:alert(1)></iframe>",
            "<svg onload=alert(1)>",
            "data:text/html,<script>alert(1)</script>",
            "<link rel=stylesheet href=javascript:alert(1)>",
        ]
        
        for xss in xss_attempts:
            result = WebSocketValidator.validate_message_content(xss)
            assert result["valid"] is False, f"XSS –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {xss}"

    def test_control_characters_comprehensive(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        control_chars = [
            "\x00",  # NULL
            "\x01",  # SOH
            "\x02",  # STX
            "\x03",  # ETX
            "\x04",  # EOT
            "\x05",  # ENQ
            "\x06",  # ACK
            "\x07",  # BEL
            "\x08",  # BS
            "\x0B",  # VT
            "\x0C",  # FF
            "\x0E",  # SO
            "\x0F",  # SI
            "\x10",  # DLE
            "\x11",  # DC1
            "\x12",  # DC2
            "\x13",  # DC3
            "\x14",  # DC4
            "\x15",  # NAK
            "\x16",  # SYN
            "\x17",  # ETB
            "\x18",  # CAN
            "\x19",  # EM
            "\x1A",  # SUB
            "\x1B",  # ESC
            "\x1C",  # FS
            "\x1D",  # GS
            "\x1E",  # RS
            "\x1F",  # US
            "\x7F",  # DEL
        ]
        
        for char in control_chars:
            result = WebSocketValidator.validate_message_content(f"Hello{char}World")
            assert result["valid"] is False, f"–£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∏–º–≤–æ–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {repr(char)}"


class TestAdvancedRoomNameValidation:
    def test_unicode_room_names(self):
        """–¢–µ—Å—Ç —é–Ω–∏–∫–æ–¥–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–Ω–∞—Ç"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω ROOM_NAME_PATTERN = r'^[a-zA-Z–∞-—è–ê-–Ø0-9_\-\s]+$'
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        unicode_names = [
            "–ö–æ–º–Ω–∞—Ç–∞-1",  # –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        ]
        
        for name in unicode_names:
            result = WebSocketValidator.validate_room_name(name)
            assert result["valid"] is True, f"–Æ–Ω–∏–∫–æ–¥–Ω–æ–µ –∏–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {name}"
        
        # –ù–µ–ª–∞—Ç–∏–Ω—Å–∫–∏–µ/–Ω–µ–∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        unsupported_names = [
            "„ÉÅ„É£„ÉÉ„Éà„É´„Éº„É†",  # —è–ø–æ–Ω—Å–∫–∏–π –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
            "ÿ∫ÿ±ŸÅÿ©_ÿßŸÑÿØÿ±ÿØÿ¥ÿ©",  # –∞—Ä–∞–±—Å–∫–∏–π –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
            "◊ó◊ì◊®_◊¶'◊ê◊ò",  # –∏–≤—Ä–∏—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
            "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó",  # —Ç–∞–π—Å–∫–∏–π –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
            "Room_üåç",  # —ç–º–æ–¥–∑–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        ]
        
        for name in unsupported_names:
            result = WebSocketValidator.validate_room_name(name)
            assert result["valid"] is False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∏–º—è –ø—Ä–∏–Ω—è—Ç–æ: {name}"

    def test_room_name_edge_lengths(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –¥–ª–∏–Ω –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–Ω–∞—Ç"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        result = WebSocketValidator.validate_room_name("ab")
        assert result["valid"] is True
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        max_name = "a" * WebSocketValidator.MAX_ROOM_NAME_LENGTH
        result = WebSocketValidator.validate_room_name(max_name)
        assert result["valid"] is True
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        too_long = "a" * (WebSocketValidator.MAX_ROOM_NAME_LENGTH + 1)
        result = WebSocketValidator.validate_room_name(too_long)
        assert result["valid"] is False

    def test_forbidden_room_names_case_insensitive(self):
        """–¢–µ—Å—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º—ë–Ω (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)"""
        forbidden_variations = [
            "admin", "Admin", "ADMIN", "AdMiN",
            "root", "Root", "ROOT", "RoOt",
            "system", "System", "SYSTEM", "SyStEm",
        ]
        
        for name in forbidden_variations:
            result = WebSocketValidator.validate_room_name(name)
            assert result["valid"] is False, f"–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –ø—Ä–∏–Ω—è—Ç–æ: {name}"

    def test_room_name_special_characters(self):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–º–Ω–∞—Ç"""
        # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        allowed_chars = [
            "Room-1", "Room_1", "Room 1",
            "Room-1_Test", "Room_1-Test", "Room 1 Test",
        ]
        
        for name in allowed_chars:
            result = WebSocketValidator.validate_room_name(name)
            assert result["valid"] is True, f"–†–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –∏–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {name}"
        
        # –¢–æ—á–∫–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–º–Ω–∞—Ç
        dot_name = "Room.1"
        result = WebSocketValidator.validate_room_name(dot_name)
        assert result["valid"] is False, f"–¢–æ—á–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {dot_name}"
        
        # –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        forbidden_chars = [
            "Room!1", "Room@1", "Room#1", "Room$1",
            "Room%1", "Room^1", "Room&1", "Room*1",
            "Room(1", "Room)1", "Room+1", "Room=1",
            "Room[1", "Room]1", "Room{1", "Room}1",
            "Room|1", "Room\\1", "Room:1", "Room;1",
            "Room\"1", "Room'1", "Room<1", "Room>1",
            "Room,1", "Room?1", "Room/1", "Room`1",
            "Room~1",
        ]
        
        for name in forbidden_chars:
            result = WebSocketValidator.validate_room_name(name)
            assert result["valid"] is False, f"–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ –∏–º—è –ø—Ä–∏–Ω—è—Ç–æ: {name}"


class TestAdvancedUserIdValidation:
    def test_large_user_ids(self):
        """–¢–µ—Å—Ç –±–æ–ª—å—à–∏—Ö user_id"""
        large_ids = [2**31 - 1, 2**32 - 1, 999999999]
        
        for user_id in large_ids:
            result = WebSocketValidator.validate_user_id(user_id)
            assert result["valid"] is True, f"–ë–æ–ª—å—à–æ–π ID –æ—Ç–∫–ª–æ–Ω—ë–Ω: {user_id}"

    def test_user_id_string_conversion(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö ID"""
        # –¢–æ–ª—å–∫–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        string_ids = ["123"]
        
        for user_id in string_ids:
            result = WebSocketValidator.validate_user_id(user_id)
            assert result["valid"] is True, f"–°—Ç—Ä–æ–∫–æ–≤—ã–π ID –æ—Ç–∫–ª–æ–Ω—ë–Ω: {user_id}"
            assert result["user_id"] == 123, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {user_id}"
        
        # –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ, –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—ã–µ –∏ –¥–≤–æ–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        unsupported_ids = ["0x7B", "0o173", "0b1111011"]
        for user_id in unsupported_ids:
            result = WebSocketValidator.validate_user_id(user_id)
            assert result["valid"] is False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–∏–Ω—è—Ç: {user_id}"

    def test_user_id_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ user_id"""
        edge_cases = [
            (0, False),  # –Ω–æ–ª—å
            (-1, False),  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
            (1, True),   # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            ("0", False),  # —Å—Ç—Ä–æ–∫–∞ –Ω–æ–ª—å
            ("-1", False),  # —Å—Ç—Ä–æ–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
            ("1", True),   # —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            ("", False),   # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            ("abc", False),  # –Ω–µ—á–∏—Å–ª–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ("12.34", False),  # –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ
            ("12,34", False),  # –¥—Ä–æ–±–Ω–æ–µ —Å –∑–∞–ø—è—Ç–æ–π
        ]
        
        for user_id, expected_valid in edge_cases:
            result = WebSocketValidator.validate_user_id(user_id)
            assert result["valid"] is expected_valid, f"ID {user_id}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_valid}, –ø–æ–ª—É—á–µ–Ω–æ {result['valid']}"


