"""
–°–µ—Ä–≤–∏—Å –¥–ª—è WebSocket –æ–ø–µ—Ä–∞—Ü–∏–π
"""
from typing import Dict, List, Optional, Any
from collections import defaultdict
from flask import current_app, request
from flask_login import current_user
from flask_socketio import emit, join_room, leave_room
from app.extensions import db
from app.models import User
from app.state import user_state, conn_mgr, room_mgr
from .message_service import MessageService
from .room_service import RoomService
from .user_service import UserService


class WebSocketService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è WebSocket –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    DEFAULT_ROOM = 'general_chat'
    
    def __init__(self):
        # –õ–æ–∫–∞–ª—å–Ω—ã–π in-memory –∫–µ—à (fallback –¥–ª—è dev)
        self.active_users = defaultdict(dict)  # {room: {user_id: username}}
        self.active_users[self.DEFAULT_ROOM] = {}
        self.connected_users = {}  # {user_id: socket_id}
        self.dm_rooms = defaultdict(set)
    
    def handle_connect(self, socketio) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not current_user.is_authenticated:
            current_app.logger.warning("üî¥ [CONNECT DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return
        
        user_id = current_user.id
        current_app.logger.info(f"üîµ [CONNECT DEBUG] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({current_user.username}) —Å SID {request.sid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
        if user_id in self.connected_users:
            old_sid = self.connected_users[user_id]
            current_app.logger.info(f"üîµ [CONNECT DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å SID {old_sid}")
            if old_sid != request.sid:
                # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                current_app.logger.info(f"üîµ [CONNECT DEBUG] –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {old_sid}")
                leave_room(self.DEFAULT_ROOM, sid=old_sid)
                socketio.server.disconnect(old_sid)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.connected_users[user_id] = request.sid
        current_app.logger.info(f"‚úÖ [CONNECT DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å SID {request.sid}")
        current_app.logger.info(f"üîµ [CONNECT DEBUG] –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.connected_users}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ Redis
        try:
            conn_mgr.register_connection(user_id, request.sid)
        except Exception as e:
            current_app.logger.warning(f"Redis conn register failed: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        join_room('app_aware_clients')
        UserService.set_user_online(user_id, True)
        emit('user_status', {'user_id': user_id, 'online': True}, broadcast=True)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._join_default_room(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self._send_initial_data(user_id)
    
    def handle_disconnect(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not current_user.is_authenticated:
            return
        
        user_id = current_user.id
        username = current_user.username
        user_was_in_any_room = False
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
        for room_name, users in list(self.active_users.items()):
            if user_id in users:
                user_was_in_any_room = True
                del users[user_id]
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
                try:
                    user_state.remove_user_from_room(user_id, room_name)
                except Exception as e:
                    current_app.logger.warning(f"Redis remove_user_from_room failed: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                emit('user_left', {
                    'user_id': user_id,
                    'username': current_user.username,
                    'room': room_name
                }, room=room_name, include_self=False)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                emit('current_users', {
                    'users': dict(users),
                    'room': room_name
                }, room=room_name)
                
                # –ü–†–û–í–ï–†–Ø–ï–ú –ò –£–î–ê–õ–Ø–ï–ú –ü–£–°–¢–´–ï –ö–û–ú–ù–ê–¢–´
                self._check_and_cleanup_empty_room(room_name)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
        if user_id in self.connected_users:
            del self.connected_users[user_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserService.set_user_online(user_id, False)
        emit('user_status', {'user_id': user_id, 'online': False}, broadcast=True)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ Redis
        try:
            conn_mgr.remove_connection(user_id)
        except Exception as e:
            current_app.logger.warning(f"Redis remove_connection failed: {e}")
    
    def _check_and_cleanup_empty_room(self, room_name: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–Ω–∞—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if room_name == self.DEFAULT_ROOM:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            local_users = self.active_users.get(room_name, {})
            local_user_count = len(local_users)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
            redis_user_count = 0
            try:
                redis_users = user_state.get_room_users(room_name)
                redis_user_count = len(redis_users)
            except Exception as e:
                current_app.logger.warning(f"Redis get_room_users failed: {e}")
            
            # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö, —É–¥–∞–ª—è–µ–º –µ—ë
            if local_user_count == 0 and redis_user_count == 0:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                success = RoomService.cleanup_empty_room(room_name)
                
                if success:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
                    if room_name in self.active_users:
                        del self.active_users[room_name]
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
                    self._broadcast_room_list()
                
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–Ω–∞—Ç—ã '{room_name}': {e}")
    
    def _check_and_cleanup_empty_rooms(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∫—Ä–æ–º–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            rooms = RoomService.get_all_rooms()
            
            for room_data in rooms:
                room_name = room_data['name']
                if room_name == self.DEFAULT_ROOM:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
                has_users = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                if room_name in self.active_users and self.active_users[room_name]:
                    has_users = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
                if not has_users:
                    try:
                        users = user_state.get_room_users(room_name)
                        has_users = len(users) > 0
                    except Exception as e:
                        current_app.logger.warning(f"Redis get_room_users failed: {e}")
                
                # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
                if not has_users:
                    current_app.logger.info(f"–ö–æ–º–Ω–∞—Ç–∞ {room_name} –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º...")
                    RoomService.cleanup_empty_room(room_name)
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
                    if room_name in self.active_users:
                        del self.active_users[room_name]
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
                    self._broadcast_room_list()
                    
        except Exception as e:
            current_app.logger.error(f"Error checking empty rooms: {e}")
    
    def handle_heartbeat(self, data: Optional[Dict] = None) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç heartbeat –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        if not current_user.is_authenticated:
            return
        
        user_id = current_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat –≤ Redis
        try:
            conn_mgr.refresh_heartbeat(user_id)
        except Exception as e:
            current_app.logger.warning(f"Redis refresh_heartbeat failed: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        emit('heartbeat_ack', {'timestamp': data.get('timestamp') if data else None})
    
    def handle_create_room(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"""
        if not current_user.is_authenticated:
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'room_name' –∫–∞–∫ –≤ sockets_old.py
        room_name = data.get('room_name', '').strip()
        
        if not room_name:
            emit('room_created', {'success': False, 'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'})
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–ë–ï–ó description)
        room = RoomService.create_room(
            name=room_name,
            creator_id=current_user.id
        )
        
        if room:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –≤ sockets_old.py
            emit('room_created', {
                'success': True,
                'room_name': room.name,
                'message': f'–ö–æ–º–Ω–∞—Ç–∞ "{room.name}" —Å–æ–∑–¥–∞–Ω–∞!',
                'auto_join': True  # –§–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
            self._broadcast_room_list()
        else:
            emit('room_created', {'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'})
    
    def handle_join_room(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ"""
        if not current_user.is_authenticated:
            return
        
        room_name = data.get('room', '').strip()
        if not room_name:
            return
        
        user_id = current_user.id
        username = current_user.username
        
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–º–Ω–∞—Ç (–∫—Ä–æ–º–µ DM –∫–æ–º–Ω–∞—Ç –∏ –∫–æ–º–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        for existing_room_name, users in list(self.active_users.items()):
            if not existing_room_name.startswith('dm_') and user_id in users and existing_room_name != room_name:
                leave_room(existing_room_name)
                del self.active_users[existing_room_name][user_id]
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (Redis/in-memory)
                try:
                    user_state.remove_user_from_room(user_id, existing_room_name)
                except Exception as e:
                    current_app.logger.warning(f"Redis remove_user_from_room failed: {e}")
                
                emit('user_left', {
                    'user_id': user_id,
                    'username': username,
                    'room': existing_room_name,
                }, room=existing_room_name)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                emit('current_users', {
                    'users': dict(self.active_users[existing_room_name]),
                    'room': existing_room_name
                }, room=existing_room_name)
                
                # –ü–†–û–í–ï–†–Ø–ï–ú –ò –£–î–ê–õ–Ø–ï–ú –ü–£–°–¢–´–ï –ö–û–ú–ù–ê–¢–´
                self._check_and_cleanup_empty_room(existing_room_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        room = RoomService.get_room_by_name(room_name)
        if not room:
            room = RoomService.create_room(
                name=room_name,
                creator_id=user_id
            )
            if not room:
                emit('room_join_error', {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'})
                return
        
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        join_room(room_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        if room_name not in self.active_users:
            self.active_users[room_name] = {}
        self.active_users[room_name][user_id] = username
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Redis
        try:
            user_state.ensure_room_exists(room_name)
            user_state.add_user_to_room(user_id, username, room_name)
        except Exception as e:
            current_app.logger.warning(f"Redis add_user_to_room failed: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        emit('user_joined', {
            'user_id': user_id,
            'username': username,
            'room': room_name
        }, room=room_name, include_self=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
        self._send_room_users(room_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        self._broadcast_room_list()
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        for check_room_name, check_users in list(self.active_users.items()):
            if not check_room_name.startswith('dm_') and check_room_name != self.DEFAULT_ROOM and len(check_users) == 0:
                self._check_and_cleanup_empty_room(check_room_name)
    
    def handle_leave_room(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
        if not current_user.is_authenticated:
            return
        
        room_name = data.get('room', '').strip()
        if not room_name:
            return
        
        user_id = current_user.id
        username = current_user.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
        if room_name not in self.active_users or user_id not in self.active_users[room_name]:
            return
        
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        leave_room(room_name)
        del self.active_users[room_name][user_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
        try:
            user_state.remove_user_from_room(user_id, room_name)
        except Exception as e:
            current_app.logger.warning(f"Redis remove_user_from_room failed: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        emit('user_left', {
            'user_id': user_id,
            'username': username,
            'room': room_name
        }, room=room_name, include_self=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        emit('current_users', {
            'users': dict(self.active_users[room_name]),
            'room': room_name
        }, room=room_name)
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ò –£–î–ê–õ–Ø–ï–ú –ü–£–°–¢–´–ï –ö–û–ú–ù–ê–¢–´
        self._check_and_cleanup_empty_room(room_name)
    
    def handle_send_message(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not current_user.is_authenticated:
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'message' –∫–∞–∫ –≤ sockets_old.py
        content = data.get('message', '').strip()
        room_name = data.get('room', '').strip()
        
        if not content or not room_name:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        room = RoomService.get_room_by_name(room_name)
        if not room:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–∞–∫ –≤ sockets_old.py)
            room = RoomService.create_room(
                name=room_name,
                creator_id=current_user.id
            )
            if not room:
                emit('message_error', {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'})
                return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        message = MessageService.create_message(
            content=content,
            sender_id=current_user.id,
            room_id=room.id
        )
        
        if message:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ sockets_old.py –∏ –ò–°–ö–õ–Æ–ß–ê–ï–ú –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            emit('new_message', {
                'sender_id': message.sender_id,
                'sender_username': current_user.username,
                'content': message.content,
                'room': room_name,
                'room_id': room.id,
                'timestamp': message.timestamp.isoformat(),
                'created_at': message.timestamp.isoformat(),
                'is_dm': False,
            }, room=room_name, include_self=False)  # –ò–°–ö–õ–Æ–ß–ê–ï–ú –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        else:
            emit('message_error', {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'})
    
    def handle_send_dm(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        current_app.logger.info(f"üîµ [DM DEBUG] handle_send_dm –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        current_app.logger.info(f"üîµ [DM DEBUG] –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.id if current_user.is_authenticated else '–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}")
        
        if not current_user.is_authenticated:
            current_app.logger.warning("üî¥ [DM DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            emit('dm_error', {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'})
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'message' –∫–∞–∫ –≤ sockets_old.py
        content = data.get('message', '').strip()
        recipient_id = data.get('recipient_id')
        
        current_app.logger.info(f"üîµ [DM DEBUG] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {current_user.id} ({current_user.username})")
        current_app.logger.info(f"üîµ [DM DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å ID: {recipient_id}")
        current_app.logger.info(f"üîµ [DM DEBUG] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{content}'")
        current_app.logger.info(f"üîµ [DM DEBUG] –î–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(content)}")
        
        if not content or not recipient_id:
            current_app.logger.warning(f"üî¥ [DM DEBUG] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: content='{content}', recipient_id={recipient_id}")
            emit('dm_error', {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'})
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if int(recipient_id) == current_user.id:
            current_app.logger.warning(f"üî¥ [DM DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ")
            emit('dm_error', {'error': '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ'})
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient = UserService.get_user_by_id(recipient_id)
        if not recipient:
            current_app.logger.warning(f"üî¥ [DM DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å {recipient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            emit('dm_error', {'error': '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
            return
        
        current_app.logger.info(f"üîµ [DM DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {recipient.username} (ID: {recipient.id})")
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_app.logger.info(f"üîµ [DM DEBUG] –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î...")
        message = MessageService.create_message(
            content=content,
            sender_id=current_user.id,
            recipient_id=recipient_id,
            is_dm=True
        )
        
        current_app.logger.info(f"üîµ [DM DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {message is not None}")
        if message:
            current_app.logger.info(f"üîµ [DM DEBUG] ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id}")
            current_app.logger.info(f"üîµ [DM DEBUG] –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {message.timestamp}")
        
        if message:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤ sockets_old.py
            message_data = {
                'sender_id': current_user.id,
                'sender_username': current_user.username,
                'recipient_id': recipient_id,
                'content': message.content,
                'timestamp': message.timestamp.isoformat(),
                'is_dm': True
            }
            
            current_app.logger.info(f"üîµ [DM DEBUG] –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã: {message_data}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Redis connection manager
            try:
                current_app.logger.info(f"üîµ [DM DEBUG] –ò—â–µ–º SID –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è {recipient_id}")
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à, –ø–æ—Ç–æ–º Redis (–∫–∞–∫ –≤ sockets_old.py)
                recipient_sid = self.connected_users.get(int(recipient_id))
                current_app.logger.info(f"üîµ [DM DEBUG] –õ–æ–∫–∞–ª—å–Ω—ã–π SID: {recipient_sid}")
                
                if not recipient_sid:
                    # Fallback –Ω–∞ Redis
                    recipient_sid = conn_mgr.get_user_socket(int(recipient_id))
                    current_app.logger.info(f"üîµ [DM DEBUG] Redis SID: {recipient_sid}")
                
                current_app.logger.info(f"üîµ [DM DEBUG] –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.connected_users}")
                
                if recipient_sid:
                    current_app.logger.info(f"üîµ [DM DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º new_dm –≤ room={recipient_sid}")
                    emit('new_dm', message_data, room=recipient_sid)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º dm_conversations - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    # emit('dm_conversations', {
                    #     'conversations': UserService.get_dm_conversations(int(recipient_id))
                    # }, room=recipient_sid)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º update_unread_indicator - —ç—Ç–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ new_dm
                    # emit('update_unread_indicator', {
                    #     'sender_id': current_user.id,
                    #     'username': current_user.username
                    # }, room=recipient_sid)
                    
                    current_app.logger.info(f"‚úÖ [DM DEBUG] DM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id} —á–µ—Ä–µ–∑ SID {recipient_sid}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                    emit('dm_sent', {
                        'success': True,
                        'recipient_id': recipient_id,
                        'recipient_username': recipient.username,
                        'message_id': message.id
                    })
                else:
                    current_app.logger.warning(f"üî¥ [DM DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å {recipient_id} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î, –Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –æ–Ω–ª–∞–π–Ω
                    emit('dm_sent', {
                        'success': True,
                        'recipient_id': recipient_id,
                        'recipient_username': recipient.username,
                        'message_id': message.id,
                        'offline': True
                    })
            except Exception as e:
                current_app.logger.error(f"üî¥ [DM DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")
                emit('dm_error', {'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}'})
        else:
            current_app.logger.error(f"üî¥ [DM DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            emit('dm_error', {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'})
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        # emit('dm_conversations', {
        #     'conversations': UserService.get_dm_conversations(current_user.id)
        # })
    
    def _join_default_room(self, user_id: int) -> None:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        username = current_user.username
        
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        join_room(self.DEFAULT_ROOM)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        self.active_users[self.DEFAULT_ROOM][user_id] = username
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Redis
        try:
            user_state.ensure_room_exists(self.DEFAULT_ROOM)
            user_state.add_user_to_room(user_id, username, self.DEFAULT_ROOM)
        except Exception as e:
            current_app.logger.warning(f"Redis add_user_to_room failed: {e}")
    
    def _send_initial_data(self, user_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._send_room_users(self.DEFAULT_ROOM)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        self._broadcast_room_list()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.handle_get_message_history({
            'room': self.DEFAULT_ROOM,
            'limit': 20
        })
    
    def _send_room_users(self, room_name: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        try:
            users = user_state.get_room_users(room_name)
        except Exception:
            users = dict(self.active_users.get(room_name, {}))
        
        emit('current_users', {'users': users, 'room': room_name})
    
    def _broadcast_room_list(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç –∫–∞–∫ –≤ sockets_old.py
        rooms_data = RoomService.get_all_rooms()
        rooms_list = [room['name'] for room in rooms_data]
        emit('room_list', {'rooms': rooms_list}, broadcast=True)
    
    def handle_get_current_users(self, data: Dict) -> None:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ"""
        if not current_user.is_authenticated:
            return
        
        room_name = data.get('room', self.DEFAULT_ROOM)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
        users = dict(self.active_users.get(room_name, {}))
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
        if current_user.id not in users:
            users[current_user.id] = current_user.username
            
        current_app.logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_name}: {users}")
        emit('current_users', {
            'users': users,
            'room': room_name
        })
    
    def handle_load_more_messages(self, data: Dict) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if not current_user.is_authenticated:
            current_app.logger.warning("LOAD MORE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return
        
        room_name = data.get('room')
        offset = data.get('offset', 0)
        limit = data.get('limit', 10)
        
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            room = RoomService.get_room_by_name(room_name)
            if not room:
                current_app.logger.warning(f"LOAD MORE: –ö–æ–º–Ω–∞—Ç–∞ '{room_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                emit('load_more_error', {'error': '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            messages_data = MessageService.get_room_messages(room.id, limit, offset)
            
            emit('more_messages_loaded', {
                'messages': messages_data,
                'has_more': len(messages_data) == limit,
                'offset': offset + len(messages_data),
                'room': room_name
            })
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            emit('load_more_error', {'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π'})
    
    def handle_get_message_history(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–Ω–∞—Ç—ã"""
        if not current_user.is_authenticated:
            return
        
        room_name = data.get('room')
        limit = data.get('limit', 20)
        
        if not room_name:
            return
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É
            room = RoomService.get_room_by_name(room_name)
            if not room:
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            messages_data = MessageService.get_room_messages(room.id, limit)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç—É
            emit('message_history', {
                'room': room_name,
                'messages': messages_data,
                'has_more': len(messages_data) == limit
            })
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            emit('message_history_error', {
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π'
            })
    
    def handle_start_dm(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        current_app.logger.info(f"üîµ [DM DEBUG] handle_start_dm –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        
        if not current_user.is_authenticated:
            current_app.logger.warning(f"üî¥ [DM DEBUG] start_dm: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            emit('dm_error', {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'})
            return
        
        recipient_id = data.get('recipient_id')
        limit = data.get('limit', 20)
        
        current_app.logger.info(f"üîµ [DM DEBUG] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {current_user.id} ({current_user.username})")
        current_app.logger.info(f"üîµ [DM DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å ID: {recipient_id}")
        current_app.logger.info(f"üîµ [DM DEBUG] –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}")
        
        if not recipient_id:
            current_app.logger.warning(f"üî¥ [DM DEBUG] recipient_id –Ω–µ —É–∫–∞–∑–∞–Ω")
            emit('dm_error', {'error': 'ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω'})
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
        if int(recipient_id) == current_user.id:
            current_app.logger.warning(f"üî¥ [DM DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
            emit('dm_error', {'error': '–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π'})
            return
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            current_app.logger.info(f"üîµ [DM DEBUG] –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –ë–î...")
            recipient = UserService.get_user_by_id(recipient_id)
            if not recipient:
                current_app.logger.warning(f"üî¥ [DM DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å ID {recipient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                emit('dm_error', {'error': '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
                return
            
            current_app.logger.info(f"üîµ [DM DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {recipient.username} (ID: {recipient.id})")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            current_app.logger.info(f"üîµ [DM DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
            messages_data = MessageService.get_dm_messages(current_user.id, recipient_id, limit)
            current_app.logger.info(f"üîµ [DM DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages_data)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if messages_data:
                current_app.logger.info(f"üîµ [DM DEBUG] –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages_data[0] if len(messages_data) > 0 else '–Ω–µ—Ç'}")
                current_app.logger.info(f"üîµ [DM DEBUG] –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages_data[-1] if len(messages_data) > 0 else '–Ω–µ—Ç'}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
            history_data = {
                'recipient_id': recipient_id,
                'recipient_name': recipient.username,
                'messages': messages_data
            }
            
            current_app.logger.info(f"üîµ [DM DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º dm_history —Å –¥–∞–Ω–Ω—ã–º–∏: {history_data}")
            emit('dm_history', history_data)
            
            current_app.logger.info(f"‚úÖ [DM DEBUG] dm_history –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å {len(messages_data)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        except Exception as e:
            current_app.logger.error(f"üî¥ [DM DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –õ–°: {e}")
            current_app.logger.error(f"üî¥ [DM DEBUG] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            emit('dm_error', {'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}'})
    
    def handle_get_dm_conversations(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not current_user.is_authenticated:
            return
        
        try:
            conversations = UserService.get_dm_conversations(current_user.id)
            current_app.logger.info(f"üîµ [DM DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º dm_conversations —Å {len(conversations)} –¥–∏–∞–ª–æ–≥–∞–º–∏")
            emit('dm_conversations', {
                'conversations': conversations
            })
            current_app.logger.info(f"‚úÖ [DM DEBUG] dm_conversations –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            current_app.logger.error(f"üî¥ [DM DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
    
    def handle_mark_messages_as_read(self, data: Dict) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        current_app.logger.info(f"üîµ [DM DEBUG] handle_mark_messages_as_read –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        
        if not current_user.is_authenticated:
            current_app.logger.warning("üî¥ [DM DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return
        
        sender_id = data.get('sender_id')
        current_app.logger.info(f"üîµ [DM DEBUG] –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: –ø–æ–ª—É—á–∞—Ç–µ–ª—å={current_user.id}, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å={sender_id}")
        
        try:
            # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            success = MessageService.mark_messages_as_read(current_user.id, sender_id)
            current_app.logger.info(f"üîµ [DM DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {success}")
            
            if success:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
                # emit('dm_conversations', {
                #     'conversations': UserService.get_dm_conversations(current_user.id)
                # })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                emit('messages_marked_read', {
                    'success': True,
                    'sender_id': sender_id
                })
                current_app.logger.info(f"‚úÖ [DM DEBUG] –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_id}")
        except Exception as e:
            current_app.logger.error(f"üî¥ [DM DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {e}")
    
    def handle_update_unread_indicator(self, data: Dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        # –°–µ—Ä–≤–µ—Ä –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        recipient_id = data.get('recipient_id')
        if recipient_id:
            recipient_sid = self.connected_users.get(int(recipient_id))
            if recipient_sid:
                emit('update_unread_indicator', data, room=recipient_sid)
