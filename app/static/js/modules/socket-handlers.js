/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Socket.IO —Å–æ–±—ã—Ç–∏–π
 */

class SocketHandlers {
    constructor(socket, chatUI, dmHandler) {
        this.socket = socket;
        this.chatUI = chatUI;
        this.dmHandler = dmHandler;
        this.setupHandlers();
    }

    setupHandlers() {
        console.log('üîµ [SOCKET DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π');
        
        // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        this.socket.onAny((eventName, ...args) => {
            console.log(`üîµ [SOCKET DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${eventName}`, args);
            console.log(`üîµ [SOCKET DEBUG] Socket ID: ${this.socket.id}`);
            console.log(`üîµ [SOCKET DEBUG] Current User:`, window.currentUser);
        });
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.socket.on('connect', () => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ connect –ø–æ–ª—É—á–µ–Ω–æ');
            this.handleConnect();
        });
        this.socket.on('disconnect', () => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ disconnect –ø–æ–ª—É—á–µ–Ω–æ');
            this.handleDisconnect();
        });

        // –°–æ–±—ã—Ç–∏—è –∫–æ–º–Ω–∞—Ç
        this.socket.on('room_list', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ room_list –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleRoomList(data);
        });
        this.socket.on('current_users', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ current_users –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleCurrentUsers(data);
        });
        this.socket.on('user_joined', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ user_joined –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleUserJoined(data);
        });
        this.socket.on('user_left', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ user_left –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleUserLeft(data);
        });
        this.socket.on('room_created', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ room_created –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleRoomCreated(data);
        });

        // –°–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        this.socket.on('new_message', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ new_message –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleNewMessage(data);
        });
        this.socket.on('message_history', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ message_history –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleMessageHistory(data);
        });
        this.socket.on('more_messages_loaded', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ more_messages_loaded –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleMoreMessagesLoaded(data);
        });
        this.socket.on('load_more_error', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ load_more_error –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleLoadMoreError(data);
        });

        // –°–æ–±—ã—Ç–∏—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.socket.on('dm_conversations', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ dm_conversations –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleDMConversations(data);
        });
        this.socket.on('new_dm', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ new_dm –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleNewDM(data);
        });
        this.socket.on('dm_history', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ dm_history –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleDMHistory(data);
        });
        this.socket.on('update_unread_indicator', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ update_unread_indicator –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleUpdateUnreadIndicator(data);
        });
        this.socket.on('messages_marked_read', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ messages_marked_read –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleMessagesMarkedRead(data);
        });
        this.socket.on('dm_sent', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ dm_sent –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleDMSent(data);
        });
        this.socket.on('dm_error', (data) => {
            console.log('üîµ [SOCKET DEBUG] –°–æ–±—ã—Ç–∏–µ dm_error –ø–æ–ª—É—á–µ–Ω–æ:', data);
            this.handleDMError(data);
        });
        
        console.log('‚úÖ [SOCKET DEBUG] –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    handleConnect() {
        if (window.isPageUnloading) {
            return;
        }

        console.log('üîµ [CLIENT DEBUG] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        console.log('üîµ [CLIENT DEBUG] Socket ID:', this.socket.id);
        console.log('üîµ [CLIENT DEBUG] Current User:', window.currentUser);
        console.log('üîµ [CLIENT DEBUG] Socket connected:', this.socket.connected);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç –∏ –≤–∫–ª–∞–¥–∫–∏ (initChat() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ)
        this.chatUI.initChat();
        this.chatUI.initTabs();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (this.dmHandler) {
            this.dmHandler.loadDMConversations();
        }
    }

    handleDisconnect() {
        if (!window.isPageUnloading) {
            console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                if (!this.socket.connected) {
                    this.socket.connect();
                }
            }, 1000);
        }
    }

    handleRoomList(data) {
        if (this.chatUI) {
            this.chatUI.updateRoomList(data.rooms);
        } else {
            console.warn('ChatUI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
        }
    }

    handleCurrentUsers(data) {
        console.log('–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.users, '–¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', data.room);
        console.log('–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞:', this.chatUI.currentRoom, '–†–µ–∂–∏–º –õ–°:', this.dmHandler ? this.dmHandler.isInDMMode : '–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        if (data.room !== this.chatUI.currentRoom || (this.dmHandler && this.dmHandler.isInDMMode)) {
            console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ —Ç–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ —Ä–µ–∂–∏–º –õ–°');
            return;
        }

        try {
            this.chatUI.updateUsersList(data.users, data.room);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ current_users:', error);
        }
    }

    handleUserJoined(data) {
        if (data.room === this.chatUI.currentRoom && (!this.dmHandler || !this.dmHandler.isInDMMode)) {
            this.chatUI.addUserToList(data.user_id, data.username);
            this.chatUI.addNotification(`${data.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);

            // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–¥–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        }
    }

    handleUserLeft(data) {
        const userElement = document.getElementById(`user-${data.user_id}-${this.chatUI.currentRoom}`);
        if (userElement && (!this.dmHandler || !this.dmHandler.isInDMMode)) {
            userElement.remove();
            this.chatUI.updateOnlineCount();

            // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–¥–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
            if (data.room === this.chatUI.currentRoom) {
                this.chatUI.addNotification(`${data.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
            }
        }
    }

    handleRoomCreated(data) {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ room_created:', data);
        
        if (data && data.success) {
            console.log('–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', data.room_name);
            this.chatUI.addNotification(data.message || `–ö–æ–º–Ω–∞—Ç–∞ "${data.room_name}" —Å–æ–∑–¥–∞–Ω–∞!`);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥
            if (data.auto_join && data.room_name && data.room_name !== this.chatUI.currentRoom) {
                setTimeout(() => {
                    console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É:', data.room_name);
                    this.chatUI.switchToRoom(data.room_name);
                }, 500);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç - —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç room_list –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        } else {
            const errorMessage = (data && data.message) ? data.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã';
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', errorMessage);
            this.chatUI.showRoomError(errorMessage);
        }
    }

    handleNewMessage(data) {
        if (data.room === this.chatUI.currentRoom && !data.is_dm && (!this.dmHandler || !this.dmHandler.isInDMMode)) {
            if (this.chatUI.virtualizedChat) {
                this.chatUI.virtualizedChat.addNewMessage(data);
            } else {
                this.chatUI.addMessageToChat(data);
            }

            // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            setTimeout(() => {
                this.chatUI.autoScrollToNewMessage();
            }, 200);
        }
    }

    handleMessageHistory(data) {
        if (data.room === this.chatUI.currentRoom && (!this.dmHandler || !this.dmHandler.isInDMMode)) {
            if (this.chatUI.virtualizedChat) {
                this.chatUI.virtualizedChat.messages = data.messages;
                this.chatUI.virtualizedChat.offset = data.messages.length;
                this.chatUI.virtualizedChat.hasMore = data.has_more;
                this.chatUI.virtualizedChat.renderVisibleMessages();
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if (data.messages.length === 0 || !data.has_more) {
                    this.chatUI.virtualizedChat.loadMoreBtn.style.display = 'none';
                } else {
                    this.chatUI.virtualizedChat.loadMoreBtn.style.display = 'block';
                }
            }

            this.chatUI.messageHistoryLoaded = true;
            this.chatUI.scrollToBottom();
        }
    }

    handleMoreMessagesLoaded(data) {
        if (this.chatUI.virtualizedChat && data.room === this.chatUI.currentRoom && (!this.dmHandler || !this.dmHandler.isInDMMode)) {
            this.chatUI.virtualizedChat.handleNewMessages(data);
        }
    }

    handleLoadMoreError(data) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', data.error);
        if (this.chatUI.virtualizedChat) {
            this.chatUI.virtualizedChat.isLoading = false;
            this.chatUI.virtualizedChat.loadMoreBtn.disabled = false;
            this.chatUI.virtualizedChat.loadMoreBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
        }
    }

    handleDMConversations(data) {
        if (this.dmHandler) {
            this.dmHandler.renderDMConversations(data.conversations);
        }
    }

    handleNewDM(data) {
        console.log('üîµ [CLIENT DEBUG] handleNewDM –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
        
        if (this.dmHandler) {
            console.log('üîµ [CLIENT DEBUG] dmHandler –Ω–∞–π–¥–µ–Ω');
            console.log('üîµ [CLIENT DEBUG] currentDMRecipient:', this.dmHandler.currentDMRecipient);
            console.log('üîµ [CLIENT DEBUG] data.sender_id:', data.sender_id);
            console.log('üîµ [CLIENT DEBUG] data.recipient_id:', data.recipient_id);
            console.log('üîµ [CLIENT DEBUG] currentUser.id:', window.currentUser?.id);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const isForCurrentUser = data.recipient_id == window.currentUser?.id;
            
            // –ò –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
            const isInActiveDialog = this.dmHandler.isInDMMode && 
                                   this.dmHandler.currentDMRecipient == data.sender_id;
            
            const isForCurrentDM = isForCurrentUser && isInActiveDialog;

            console.log('üîµ [CLIENT DEBUG] isForCurrentUser:', isForCurrentUser);
            console.log('üîµ [CLIENT DEBUG] isInDMMode:', this.dmHandler.isInDMMode);
            console.log('üîµ [CLIENT DEBUG] isInActiveDialog:', isInActiveDialog);
            console.log('üîµ [CLIENT DEBUG] isForCurrentDM:', isForCurrentDM);

            if (isForCurrentDM) {
                console.log('üîµ [CLIENT DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤');
                this.dmHandler.addDMMessage(data);
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–∏–¥–∏—Ç
                console.log('üîµ [CLIENT DEBUG] –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ)');
                window.socket.emit('mark_messages_as_read', { sender_id: data.sender_id });
            } else if (isForCurrentUser) {
                console.log('üîµ [CLIENT DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã');
                this.dmHandler.showDMNotification(data);
                this.dmHandler.updateUnreadCount(data.sender_id, data.sender_username);
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateTabIndicatorFromCurrentState - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ updateUnreadCount
            } else {
                console.log('üîµ [CLIENT DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
        } else {
            console.log('üî¥ [CLIENT DEBUG] dmHandler –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
    }

    handleDMHistory(data) {
        if (!this.dmHandler) return;

        // –í–ê–ñ–ù–û: –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º startDMWithUser —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π start_dm –∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
        // –ü—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –õ–°
        this.dmHandler.currentDMRecipient = data.recipient_id;
        this.dmHandler.isInDMMode = true;
        this.dmHandler.chatUI?.hideCreateRoomInput();

        const title = document.getElementById('current-room');
        if (title) title.textContent = `–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.recipient_name}`;

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        document.querySelectorAll('.dm-conversation').forEach(conv => conv.classList.remove('active'));
        const currentConversation = document.querySelector(`.dm-conversation[data-user-id="${data.recipient_id}"]`);
        if (currentConversation) {
            currentConversation.classList.add('active');
            currentConversation.classList.remove('has-unread');
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
            const badge = currentConversation.querySelector('.unread-badge');
            let unreadCount = 0;
            if (badge) {
                unreadCount = parseInt(badge.textContent) || 0;
                console.log(`üîµ [CLIENT DEBUG] handleDMHistory: –±—ã–ª–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unreadCount}`);
                badge.remove();
            }
            
            // –£–¥–∞–ª—è–µ–º unread-line
            const unreadLine = currentConversation.querySelector('.unread-line');
            if (unreadLine) unreadLine.remove();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –≤–∫–ª–∞–¥–∫–µ
            if (unreadCount > 0) {
                this.dmHandler.totalUnreadCount = Math.max(0, this.dmHandler.totalUnreadCount - unreadCount);
                console.log(`üîµ [CLIENT DEBUG] handleDMHistory: –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ ${unreadCount}, –Ω–æ–≤—ã–π totalUnreadCount: ${this.dmHandler.totalUnreadCount}`);
                this.dmHandler.updateTabIndicatorSimple();
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        this.chatUI.clearChatUI();
        if (Array.isArray(data.messages)) {
            data.messages.forEach(msg => this.dmHandler.addDMMessage(msg));
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –õ–° –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –∏–Ω–ø—É—Ç
        this.dmHandler.switchToDMTab();
        setTimeout(() => {
            const input = document.getElementById('message-input');
            if (input) input.focus();
        }, 50);
    }

    handleUpdateUnreadIndicator(data) {
        console.log('üîµ [CLIENT DEBUG] handleUpdateUnreadIndicator –≤—ã–∑–≤–∞–Ω –¥–ª—è:', data.sender_id);
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateUnreadIndicator –∑–¥–µ—Å—å - —ç—Ç–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç—Å—è –≤ handleNewDM
        // this.dmHandler.updateUnreadIndicator(data.sender_id, data.username);
    }

    handleMessagesMarkedRead(data) {
        if (data.success) {
            console.log('–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', data.sender_id);
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if (this.dmHandler) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö, –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—è –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
                this.dmHandler.updateUnreadIndicatorsOnly(data.sender_id);
            }
        }
    }

    handleDMSent(data) {
        console.log('üîµ [CLIENT DEBUG] handleDMSent –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
        
        if (data.success) {
            console.log('‚úÖ [CLIENT DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            console.log('üîµ [CLIENT DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', data.recipient_username);
            console.log('üîµ [CLIENT DEBUG] ID —Å–æ–æ–±—â–µ–Ω–∏—è:', data.message_id);
            
            if (data.offline) {
                console.log('üîµ [CLIENT DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                this.chatUI.addNotification(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.recipient_username} (–Ω–µ –≤ —Å–µ—Ç–∏)`);
            } else {
                console.log('üîµ [CLIENT DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
                this.chatUI.addNotification(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.recipient_username}`);
            }
        } else {
            console.error('üî¥ [CLIENT DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            this.chatUI.addNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        }
    }

    handleDMError(data) {
        console.log('üîµ [CLIENT DEBUG] handleDMError –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
        
        const errorMessage = data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        console.error('üî¥ [CLIENT DEBUG] –û—à–∏–±–∫–∞ DM:', errorMessage);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        this.chatUI.addNotification(`–û—à–∏–±–∫–∞: ${errorMessage}`, 'error');
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if (errorMessage.includes('—Å–∞–º–æ–º—É —Å–µ–±–µ')) {
            console.log('üîµ [CLIENT DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ');
        } else if (errorMessage.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
            console.log('üîµ [CLIENT DEBUG] –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        } else if (errorMessage.includes('–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')) {
            console.log('üîµ [CLIENT DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SocketHandlers;
} else {
    window.SocketHandlers = SocketHandlers;
}
