/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI —á–∞—Ç–∞
 */

class ChatUI {
    constructor() {
        this.currentRoom = 'general_chat';
        this.virtualizedChat = null;
        this.messageHistoryLoaded = false;
        this.unreadMessagesCount = 0;
        this.newMessagesIndicator = null;
        this.resizeTimeout = null;
        
        this.init();
    }

    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatUI');
        this.setupEventListeners();
        this.createNewMessagesIndicator();
        this.setupChatScrollHandler();
        console.log('ChatUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        console.log('üîµ [CHAT-UI DEBUG] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            window.isPageUnloading = true;
            if (window.socket && window.socket.connected) {
                window.socket.disconnect();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Å–∞–π–∑–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(() => {
                const chatBox = document.getElementById('chat-box');
                if (chatBox) {
                    const isNearBottom = chatBox.scrollHeight - chatBox.scrollTop - chatBox.clientHeight <= 200;
                    if (isNearBottom) {
                        chatBox.scrollTop = chatBox.scrollHeight;
                    }
                }
            }, 250);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Escape –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideCreateRoomInput();
            }
        });
    }

    setupChatScrollHandler() {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ —á–∞—Ç–∞');
        const chatBox = document.getElementById('chat-box');
        if (chatBox) {
            console.log('Chat box –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞');
            chatBox.addEventListener('scroll', () => {
                const isNearBottom = chatBox.scrollHeight - chatBox.scrollTop - chatBox.clientHeight <= 50;

                if (isNearBottom && this.unreadMessagesCount > 0) {
                    this.hideNewMessagesIndicator();
                }
            });
        } else {
            console.error('Chat box –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞');
        }
    }

    createNewMessagesIndicator() {
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
        if (!this.newMessagesIndicator) {
            this.newMessagesIndicator = document.createElement('div');
            this.newMessagesIndicator.id = 'new-messages-indicator';
            this.newMessagesIndicator.innerHTML = '–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üì';
            this.newMessagesIndicator.style.cssText = `
                position: fixed;
                bottom: 70px;
                right: 20px;
                background: #007bff;
                color: white;
                padding: 10px 15px;
                border-radius: 20px;
                cursor: pointer;
                z-index: 1000;
                display: none;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            `;

            this.newMessagesIndicator.addEventListener('click', () => {
                const chatBox = document.getElementById('chat-box');
                if (chatBox) {
                    chatBox.scrollTop = chatBox.scrollHeight;
                    this.hideNewMessagesIndicator();
                }
            });

            document.body.appendChild(this.newMessagesIndicator);
            console.log('–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ DOM');
        }
        return this.newMessagesIndicator;
    }

    showNewMessagesIndicator(count) {
        const indicator = this.createNewMessagesIndicator();
        indicator.innerHTML = `${count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üì`;
        indicator.style.display = 'block';
        this.unreadMessagesCount = count;
    }

    hideNewMessagesIndicator() {
        if (this.newMessagesIndicator) {
            this.newMessagesIndicator.style.display = 'none';
            this.unreadMessagesCount = 0;
        }
    }

    initChat() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', this.currentRoom);
        this.clearChatUI();

        if (!window.dmHandler || !window.dmHandler.isInDMMode) {
            const chatBox = document.getElementById('chat-box');
            console.log('Chat box –Ω–∞–π–¥–µ–Ω:', !!chatBox);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ç–æ—Ä
            if (!this.virtualizedChat) {
                this.virtualizedChat = new VirtualizedChat(chatBox);
            } else {
                this.virtualizedChat.resetForNewRoom(this.currentRoom);
            }
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (this.virtualizedChat) {
                this.virtualizedChat.loadMoreBtn.style.display = 'none';
            }

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
            window.socket.emit('join_room', { room: this.currentRoom });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            this.loadMessageHistory(this.currentRoom);
        } else {
            console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–∞—Ç–∞ - —Ä–µ–∂–∏–º –õ–°');
        }
    }

    switchToRoom(roomName) {
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        if (this.currentRoom && this.currentRoom !== roomName && window.socket) {
            window.socket.emit('leave_room', { room: this.currentRoom });
        }
        
        if (window.dmHandler) {
            window.dmHandler.isInDMMode = false;
            window.dmHandler.currentDMRecipient = null;
        }
        this.messageHistoryLoaded = false;

        this.currentRoom = roomName;
        document.getElementById('current-room').textContent = roomName;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
        document.querySelectorAll('.room-item.active').forEach(item => {
            item.classList.remove('active');
        });

        document.querySelectorAll('.room-item').forEach(item => {
            if (item.textContent.includes(roomName)) {
                item.classList.add('active');
                item.classList.add('new-room');
                setTimeout(() => {
                    item.classList.remove('new-room');
                }, 2000);
            }
        });

        this.switchToRoomsTab();
        this.initChat();

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
        if (this.virtualizedChat) {
            this.virtualizedChat.loadMoreBtn.style.display = 'none';
        }

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ initChat()
    }

    switchToRoomsTab() {
        const dmTab = document.querySelector('.tab-btn[data-tab="dms"]');
        const roomsTab = document.querySelector('.tab-btn[data-tab="rooms"]');
        const dmContent = document.getElementById('dms-tab');
        const roomsContent = document.getElementById('rooms-tab');

        if (dmTab && roomsTab && dmContent && roomsContent) {
            dmTab.classList.remove('active');
            roomsTab.classList.add('active');
            dmContent.classList.remove('active');
            roomsContent.classList.add('active');
        }

        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –õ–° –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–æ–º–Ω–∞—Ç
        if (window.dmHandler && window.dmHandler.isInDMMode) {
            window.dmHandler.isInDMMode = false;
            window.dmHandler.currentDMRecipient = null;
            this.initChat();
            
            if (this.virtualizedChat) {
                this.virtualizedChat.loadMoreBtn.style.display = 'none';
            }
        }
    }

    clearChatUI() {
        console.log('–û—á–∏—Å—Ç–∫–∞ UI —á–∞—Ç–∞');
        const chatBox = document.getElementById('chat-box');
        if (chatBox) chatBox.innerHTML = '';
        
        if (this.virtualizedChat) {
            this.virtualizedChat.loadMoreBtn.style.display = 'none';
        }
        
        this.updateOnlineCount();
    }

    addMessageToChat(data) {
        const chatBox = document.getElementById('chat-box');
        if (!chatBox) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const existingMessage = chatBox.querySelector(`[data-message-id="${data.id}"]`);
        if (existingMessage && !data.is_local) return;

        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.setAttribute('data-message-id', data.id);

        const timestamp = data.timestamp ? new Date(data.timestamp).toLocaleTimeString() :
                         new Date().toLocaleTimeString();

        const isMyMessage = data.is_local || (window.currentUser && data.sender_id === window.currentUser.id);

        if (isMyMessage) {
            messageElement.classList.add('my-message');
            messageElement.innerHTML = `
                <strong>–í—ã</strong>
                <small>[${timestamp}]</small>:
                <div class="message-content">${data.content}</div>
            `;
        } else {
            messageElement.innerHTML = `
                <strong>${data.sender_username}</strong>
                <small>[${timestamp}]</small>:
                <div class="message-content">${data.content}</div>
            `;
        }

        chatBox.appendChild(messageElement);

        if (this.virtualizedChat && this.virtualizedChat.messages.length > 0) {
            this.virtualizedChat.loadMoreBtn.style.display = 'block';
        }

        this.autoScrollToNewMessage();
    }

    addUserToList(userId, username) {
        console.log('addUserToList –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è:', username, 'ID:', userId, '–≤ –∫–æ–º–Ω–∞—Ç–µ:', this.currentRoom);
        if (window.dmHandler && window.dmHandler.isInDMMode) {
            console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Ä–µ–∂–∏–º –õ–°');
            return;
        }

        const usersList = document.getElementById('active-users');
        if (!usersList) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç active-users –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ addUserToList');
            return;
        }

        if (!document.getElementById(`user-${userId}-${this.currentRoom}`)) {
            const userElement = document.createElement('li');
            userElement.id = `user-${userId}-${this.currentRoom}`;

            userElement.style.cursor = 'pointer';
            userElement.style.color = '#007bff';
            userElement.style.textDecoration = 'underline';
            userElement.style.padding = '2px 4px';
            userElement.style.margin = '2px 0';

            userElement.textContent = username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

            userElement.addEventListener('click', (e) => {
                console.log('–ö–ª–∏–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', username, 'ID:', userId);
                e.stopPropagation();
                if (window.dmHandler) {
                    window.dmHandler.startDMWithUser(userId, username);
                }
            });

            if (window.currentUser && String(userId) === String(window.currentUser.id)) {
                userElement.style.fontWeight = 'bold';
                userElement.textContent += ' (–í—ã)';
                userElement.style.cursor = 'default';
                userElement.style.color = 'inherit';
                userElement.style.textDecoration = 'none';
            }

            usersList.appendChild(userElement);
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫:', username);
            this.updateOnlineCount();
        } else {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ:', username);
        }
    }

    updateUsersList(users, room) {
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users, '–¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', room);
        const usersList = document.getElementById('active-users');
        if (!usersList) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç active-users –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        usersList.innerHTML = '';

        const currentUserId = String(window.currentUser?.id || '');
        console.log('–¢–µ–∫—É—â–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserId);
        console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', Object.entries(users));

        Object.entries(users).forEach(([userId, username]) => {
            const userElement = document.createElement('li');
            userElement.id = `user-${userId}-${room}`;

            userElement.style.cursor = 'pointer';
            userElement.style.color = '#007bff';
            userElement.style.textDecoration = 'underline';
            userElement.style.padding = '2px 4px';
            userElement.style.margin = '2px 0';

            userElement.textContent = username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

            userElement.addEventListener('click', (e) => {
                console.log('–ö–ª–∏–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', username, 'ID:', userId);
                e.stopPropagation();
                if (window.dmHandler) {
                    window.dmHandler.startDMWithUser(userId, username);
                }
            });

            console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º userId:', userId, '—Å currentUserId:', currentUserId);
            if (String(userId) === String(currentUserId)) {
                console.log('–ù–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);
                userElement.style.fontWeight = 'bold';
                userElement.textContent += ' (–í—ã)';
                userElement.style.cursor = 'default';
                userElement.style.color = 'inherit';
                userElement.style.textDecoration = 'none';
            }

            usersList.appendChild(userElement);
        });

        this.updateOnlineCount();
    }

    addNotification(text, type = 'info') {
        console.log(`üîµ [CLIENT DEBUG] addNotification –≤—ã–∑–≤–∞–Ω: "${text}", —Ç–∏–ø: ${type}`);
        
        const chatBox = document.getElementById('chat-box');
        if (!chatBox) {
            console.warn('üî¥ [CLIENT DEBUG] Chat box –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return;
        }

        const notification = document.createElement('div');
        notification.className = 'notification';
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (type) {
            case 'error':
                notification.style.color = '#dc3545';
                notification.style.backgroundColor = '#f8d7da';
                notification.style.border = '1px solid #f5c6cb';
                notification.style.borderRadius = '4px';
                notification.style.padding = '8px 12px';
                notification.style.margin = '4px 0';
                break;
            case 'success':
                notification.style.color = '#155724';
                notification.style.backgroundColor = '#d4edda';
                notification.style.border = '1px solid #c3e6cb';
                notification.style.borderRadius = '4px';
                notification.style.padding = '8px 12px';
                notification.style.margin = '4px 0';
                break;
            case 'warning':
                notification.style.color = '#856404';
                notification.style.backgroundColor = '#fff3cd';
                notification.style.border = '1px solid #ffeaa7';
                notification.style.borderRadius = '4px';
                notification.style.padding = '8px 12px';
                notification.style.margin = '4px 0';
                break;
            default: // 'info'
                notification.style.color = 'gray';
                notification.style.fontStyle = 'italic';
                break;
        }
        
        notification.textContent = text;
        chatBox.appendChild(notification);
        chatBox.scrollTop = chatBox.scrollHeight;
        
        console.log(`‚úÖ [CLIENT DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: "${text}"`);
    }

    updateOnlineCount() {
        const usersList = document.getElementById('active-users');
        const countElement = document.getElementById('online-count');
        if (usersList && countElement) {
            const count = usersList.children.length;
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', count);
            countElement.textContent = count;
        }
    }

    autoScrollToNewMessage() {
        const chatBox = document.getElementById('chat-box');
        if (!chatBox) return;

        const isNearBottom = chatBox.scrollHeight - chatBox.scrollTop - chatBox.clientHeight <= 150;

        if (isNearBottom) {
            setTimeout(() => {
                chatBox.scrollTop = chatBox.scrollHeight;
            }, 50);
            this.hideNewMessagesIndicator();
        } else {
            this.unreadMessagesCount++;
            this.showNewMessagesIndicator(this.unreadMessagesCount);
        }
    }

    scrollToBottom() {
        const chatBox = document.getElementById('chat-box');
        if (chatBox) {
            chatBox.scrollTop = chatBox.scrollHeight;
        }
    }

    loadMessageHistory(roomName) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomName);
        window.socket.emit('get_message_history', {
            room: roomName,
            limit: 20
        });
    }

    updateRoomList(rooms) {
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç:', rooms);
        const roomListElement = document.getElementById('rooms-list');
        if (!roomListElement) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç rooms-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        roomListElement.innerHTML = '';

        const sortedRooms = [...rooms].sort((a, b) => {
            if (a === 'general_chat') return -1;
            if (b === 'general_chat') return 1;
            return a.localeCompare(b);
        });

        sortedRooms.forEach(roomName => {
            const li = document.createElement('li');
            li.textContent = roomName;
            li.className = 'room-item';

            if (roomName === 'general_chat') {
                li.classList.add('default-room');
            }

            if (roomName === this.currentRoom && (!window.dmHandler || !window.dmHandler.isInDMMode)) {
                li.classList.add('active');
            }

            li.addEventListener('click', () => {
                if (roomName !== this.currentRoom || (window.dmHandler && window.dmHandler.isInDMMode)) {
                    this.switchToRoom(roomName);
                }
            });

            roomListElement.appendChild(li);
        });

        if (rooms.length === 0) {
            const li = document.createElement('li');
            li.textContent = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!";
            li.className = 'room-placeholder';
            roomListElement.appendChild(li);
        }
        
        console.log('–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:', rooms.length);
    }

    showCreateRoomInput() {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        const roomCreateElement = document.getElementById('room-create');
        const roomInputElement = document.getElementById('new-room-name');
        console.log('–≠–ª–µ–º–µ–Ω—Ç new-room-name –Ω–∞–π–¥–µ–Ω:', !!roomInputElement);
        console.log('–≠–ª–µ–º–µ–Ω—Ç room-create –Ω–∞–π–¥–µ–Ω:', !!roomCreateElement);

        if (!roomCreateElement) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç room-create –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('–≠–ª–µ–º–µ–Ω—Ç room-create –Ω–∞–π–¥–µ–Ω');

        const dmModal = document.getElementById('dm-modal');
        if (dmModal) {
            dmModal.style.display = 'none';
            console.log('–°–∫—Ä—ã–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –õ–°');
        }

        console.log('–î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active');
        roomCreateElement.classList.add('active');
        roomCreateElement.classList.remove('invalid');
        if (roomInputElement) {
            roomInputElement.value = '';
            roomInputElement.focus();
            console.log('–§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
        }

        setTimeout(() => {
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ —Ñ–æ—Ä–º—ã');
            document.addEventListener('click', this.hideCreateRoomOnClickOutside.bind(this));
        }, 100);
    }

    hideCreateRoomOnClickOutside(e) {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –≤–Ω–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        const roomCreateElement = document.getElementById('room-create');
        const createButton = document.querySelector('#rooms-tab > button');

        if (!roomCreateElement || !createButton) {
            console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–∫–∞');
            return;
        }

        if (roomCreateElement.classList.contains('active') &&
            !roomCreateElement.contains(e.target) &&
            e.target !== createButton &&
            !createButton.contains(e.target)) {
            console.log('–ö–ª–∏–∫ –≤–Ω–µ —Ñ–æ—Ä–º—ã - —Å–∫—Ä—ã–≤–∞–µ–º');
            this.hideCreateRoomInput();
        }
    }

    hideCreateRoomInput() {
        console.log('–°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        const roomCreateElement = document.getElementById('room-create');
        if (roomCreateElement) {
            roomCreateElement.classList.remove('active');
            roomCreateElement.classList.remove('invalid');
            roomCreateElement.classList.remove('valid');
            document.removeEventListener('click', this.hideCreateRoomOnClickOutside.bind(this));

            const newRoomInput = document.getElementById('new-room-name');
            if (newRoomInput) {
                newRoomInput.value = '';
            }
        }
    }

    submitCreateRoom() {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        const newRoomInput = document.getElementById('new-room-name');
        const roomCreateElement = document.getElementById('room-create');
        const newRoomName = newRoomInput.value.trim();
        
        console.log('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:', newRoomName);

        if (!newRoomName) {
            this.showRoomError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã');
            return;
        }

        if (newRoomName.length > 20) {
            this.showRoomError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤)');
            return;
        }

        if (newRoomName.length < 2) {
            this.showRoomError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞)');
            return;
        }

        roomCreateElement.classList.add('valid');
        roomCreateElement.classList.remove('invalid');

        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ create_room –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', { room_name: newRoomName });
        window.socket.emit('create_room', { room_name: newRoomName });
        this.hideCreateRoomInput();
    }

    showRoomError(message) {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', message);
        const roomCreateElement = document.getElementById('room-create');
        const errorElement = roomCreateElement?.querySelector('.error-message');

        if (roomCreateElement) {
            roomCreateElement.classList.add('invalid');
            roomCreateElement.classList.remove('valid');

            if (errorElement) {
                errorElement.textContent = message;
            }

            roomCreateElement.style.animation = 'none';
            setTimeout(() => {
                roomCreateElement.style.animation = 'shake 0.3s ease-in-out';
            }, 10);
        }
    }

    initTabs() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫');
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');
        
        console.log('–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫:', tabButtons.length);
        console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–æ–∫:', tabContents.length);

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.getAttribute('data-tab');

                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));

                button.classList.add('active');
                document.getElementById(`${tabId}-tab`).classList.add('active');

                if (tabId === 'dms') {
                    console.log('üîµ [CLIENT DEBUG] –ö–ª–∏–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
                    if (window.dmHandler) {
                        console.log('üîµ [CLIENT DEBUG] dmHandler –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º loadDMConversations');
                        window.dmHandler.loadDMConversations();
                    } else {
                        console.error('üî¥ [CLIENT DEBUG] dmHandler –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                } else if (tabId === 'rooms') {
                    // –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
                }
            });
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ChatUI;
} else {
    window.ChatUI = ChatUI;
}
